テスティング

ユニットテストやE2Eテストについて

□□8-1 ソフトウェアテスト入門

■人間によるテストVS自動化テスト
人間によるテストの場合、ソフトの仕様を元にテスト仕様書を作り、それを元にテストする
メリット：
・使い勝手や見た目などの機械的にはテスト出来ない項目もテスト出来る
・テスト仕様書は必要だが、テストプログラムは不要
・テストは開発者でなくても出来る

自動テストの場合、ソフトの仕様を元にテストプログラムを書き（ライブラリやフレームワークを使う事が多い）、それを元にテストする
メリット：
・何時でも何度でもテストを実行出来る
・テストコードを書いてしまえば、テストの実行にはコストがほぼ掛からない
・テストコードを先に書き、そのテストが通るように開発・リファクタリングを進めるTDD（Test-driven development）が出来る

■テストのレベル
自動テストを行う単位として、
・ユニットテスト ... クラスやコンポーネント単位でテストを行う
や
・End to End（E2E）テスト ... 完成したアプリ単位で行う
がある


□□8-2 ユニットテスト
テストを書くためのツールとして、JavaのJUnitや、RubyのRSpec等がある

ユニットテストは、
1.必要があれば、テストで使うデータ等を準備
2.テストを実行
3.テスト結果が正しいか確認
の手順で行う

■Mocha
JavaScriptには多数のテストフレームワークがあり、ここではMochaを使う
Mochaはテストランナーと呼ばれ、テストを実行してくれる仕組みを提供してくれる
但し、↑の3.を容易に行うためのアサーション（assertion）ライブラリは入ってないので、
自分でアサーションライブラリを組み込んで使う必要がある

本書では、Node.jsに標準で入っているassertを使用する

  "scripts": {
    "start": "webpack serve",
    "webpack": "webpack",
    "test": "mocha --compilers js:babel-register --timeout:5000"
js:babel-register ... ES6でテストコードが書かれているので、Babelを使用するので
--timeout:5000 ... 5秒で終了（E2Eテストはデフォルトの2秒で終わらない事があるので）

↑バージョンが古い書き方なのでエラーが出るので注意
 "test": "mocha --require @babel/register --exit --timeout 5000"
に書き換え

Assert | Node.js v15.4.0 Documentation
https://nodejs.org/api/assert.html
deepEqual()や、strictEqual等

また、mochaではdescribe()を使ってit()をネスト出来る

■ジャンケンクラスのテストコード

