コンポネント
コンポーネントはReactの基本単位で、Reactではコンポーネント組み合わせて画面を作っていく

□□6-1 新規プロジェクト作成
じゃんけんアプリを作成するためにプロジェクトファイルをコピー


□□6-2 最初のコード
chap6/jyanken
に記載


□□6-3 コンポーネントの作り方
Reactのコンポーネントには
1.Componentを継承したクラスコンポーネント（色々な機能）→ジャンケンで使用
2.関数のコンポーネント（単にJSXを返す）
の2つがある
JyankenPageクラスでは、Componentを継承してrender()を実装してJSXを表示している


□□6-4 PropsとState
JyankenPageコンポーネントから、ScoreBoxコンポーネントにscoreというパラメーターを渡している
このパラメーターの事を「Props」と呼ぶ

子？コンポーネントは通常受け取ったPropsの値に応じたHTMLを組み立てる
子？コンポーネント側で値を変更してはいけない

また、子？コンポーネント側でデータを持ちたい場合は、「State」に保存する
ジャンケンアプリでは、人間の押したジャンケンの手、コンピューターの乱数で作った手、をStateに持たせている

StateではReactでは、this.stateというインスタンス変数に格納されている
this.stateはオブジェクトで、コンポーネントの持つ全てのパラメーターや状態が入っている
自分でデータを持たせる場合は判り易いキー名をつける

Stateの値はthis.stateを直接参照するが、代入（更新）はthis.setState()メソッドで行う
（Reactがビューの表示更新処理をするので）

また、this.setState()メソッドをrender()内で使用すると無限呼び出しになるので注意する

JyankenPageクラスの説明
※コード側に記載


□□6-5 ライフサイクル・メソッド
JyankenPageクラスのrender()はどこからも呼ばれていないが、いつ使われているのか？

Reactライブラリが自動で呼び出している
・JSアプリがブラウザにロードされた直後、例：componentDidMount()
・コンポーネントのProps（パラメーター）が変更された時、例：componentWillRecieveProps()
・コンポーネント内でsetState()が実行され、Stateが変更された時

これらのメソッドはサーバーとのデータ通信等に使われる
例：※コード内に記述

□□6-6 イベントの扱い
Reactでは、テキストフィールドへの文字入力や、ボタンを押した等のイベントは、
JSのonClickやonChangeをそのまま使う
例：※コード内に記述


□□6-7 フォーム
Reactには、フォーム要素の扱い方には2つの方法がある

■Controlled Components ... Reactのイベント種類を使い、プログラムで入力を管理する
・INPUTタグのonChange属性を使い、入力されたデータを取得する
・入力された値は基本的にStateに保存する
・INPUTタグのvalue属性はStateの値を設定する
例：※小遣い帳のコード内に記述
メリット：
・ツイッターのような文字数制限のある入力で、タイプ時に文字数がチェック出来る
・英数字のみ入力可能なフィールドで、それ以外の入力時に警告を出せる
・ラジオボタンやチェックボックスで、チェックした瞬間に表示を切り替えられる

■Uncontrolled Components ... 入力の処理はブラウザに任せ、値は必要になった時点で取得
・値を取得する必要のあるタグにref属性を設定し、タグをアクセスするためのインスタンス変数に設定する
・値を取得するには↑で設定したインスタンス変数にアクセスして取得する
例：※小遣い帳のコード内に記述
メリット：
・コードがシンプルになる（但しリアルタイム処理は出来ない）

■その他のフォーム要素
・テキストエリア ... Reactではテキストフィールドとほぼ同じように使える
<div>項目：<textarea value={this.state.item} name={item} onChange={(e) => this.onChangeValue(e) } placeholder="おこづかい" /></div>

・セレクトボックス
<select value={this.state.payingIn ? "on" : "off"} onChange={(e) => this.onChangePayingIn(e) } />
<option value="on">入金</option>
<option value="off">出金</option>
</select>

・複数選択出来るセレクトボックス
class Fruis extends Components {
	constructor(props) {
		super(props)
		this.state = { basket: [] } // ■選択された複数の配列をbasketに保持
	}

	onChangeValue(event) {
		this.setState({ basket: Array.from(event.target.options).filter((e) => e.selected).map((e) => e.value) }) // ■event.target.valueには最後に選択したオプションしか入ってないので、セレクトボックスに対応するevent.target.optionsの状態を調べてStateに反映する
		// ■event.target.optionsはHTMLOptionsCollection型のデータなので、Array.fromで配列に変換する
		// ■filter((e) => e.selected)で現在選択しているオプションのみ抽出
		// ■map((e) => e.value)でオプションの値を抽出
	}

	render() {
		return(
			<select multiple value={this.state.basket} onChange={(e) => this.onChangeValue(e) } /> // ■multiple属性を指定、valueにはStateにある配列を指定すると、現在選択されているオプションが選択状態になる
			<option>Orange</option>
			<option>Apple</option>
			<option>Grape</option>
			</select>
		)
	}
}


□□6-8 詳細なライフサイクル・メソッド

■初めてコンポーネントが表示される場合
1.Reactライブラリーがコンポーネント（クラス）のインスタンスを生成する
　この時点でコンポーネントのコンストラクターが実行される
2.componentWillMount()があれば、実行される
3.render()が実行され、表示用のHTMLが生成され、ブラウザに表示される
4.componentDidMount()があれば、実行される
　サーバーとの通信を行いたい場合は、ここで行う
　取得したデータをsetState()でStateに設定出来る

■2回目以降にコンポーネントが表示される場合
Reactの管理しているメモリー上にコンポーネントのインスタンスがある状態でコンポーネントが表示された時の処理
1.componentWillRecieveProps(nextProps)があれば、実行される
・このメソッドは新しいProps（パラメーター）を引数で受け取るようになっていて、
　現在の状態と比較して、違っていた場合にサーバーとの通信を行う等の処理を組み込む
・Propsが以前と同じでも、このメソッドは呼び出される
2.これ以降はStateが更新された場合と同じ

■Stateが更新された場合
setState()でStateが更新された場合、↑の続きで呼ばれる
1.shouldComponentUpdate(nextProps, nextState)がコンポーネント内にあれば、実行される
・このメソッドには新しいProps、新しいState
・このメソッドがtrueを返した時のみ、画面の変更＝render()が実行される
　falseを返した時は実行されないので、高速化に繋がる
・shouldComponentUpdate()がコンポーネント内に無い場合は、いつでもrender()が実行される

2.render()の実行の前に、componentWillUpdate(nextProps, nextState)があれば、実行される
・render()には純粋にHTML表示用のコードを書き、それ以外の処理をここに書く
・shouldComponentUpdate()と同じ様に新しいProps、新しいStateが渡されるので、変更に応じた処理が出来る
・このメソッド内でsetState()を実行してはいけない→無限再帰呼び出しになる

3.このメソッドに続いてrender()が実行されHTMLが描画される

4.その後、componentDidUpdate(nextProps, nextState)があれば実行される
・新しいProps、新しいStateが渡されるので、変更に応じた処理が出来る

■コンポーネントが表示されなくなった場合
コンポーネント内にcomponentWillUnmount()があれば実行される
コンポーネントが独自のリソースを使っている場合、ここで手動で解放する

■まとめ
通常では、サーバーとの通信の為にcomponentDidMount()やcomponentWillRecieveProps(nextProps)が
使われる位だが、Reactのライフサイクルを理解するためには重要

setState()やrender()が非同期で実行されるので難しいが、このライフサイクルが理解出来れば
自分で複雑なコンポーネントも作れるようになる

また、以下の場合にもライフサイクル・メソッドが役に立つ
・shouldComponentUpdate()を実行する事で、不要なrender()メソッド呼び出を抑え高速化出来る
・Reactのコード内にjQueryを組み込むには、適切なライフサイクル・メソッドに処理を組み込む事で
　共存可能になる（基本的には非推奨）
